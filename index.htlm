<!DOCTYPE html>
<html lang="en" >
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Raspberry Pi 5 Dashboard</title>
  <style>
    /* Light/Dark mode based on user preference */
    :root {
      --bg-light: #f0f0f0;
      --bg-dark: #121212;
      --text-light: #222;
      --text-dark: #eee;
      --card-bg-light: #fff;
      --card-bg-dark: #1f1f1f;
      --border-light: #ccc;
      --border-dark: #444;
    }
    @media (prefers-color-scheme: dark) {
      body {
        background: var(--bg-dark);
        color: var(--text-dark);
      }
      .card {
        background: var(--card-bg-dark);
        border-color: var(--border-dark);
      }
      table {
        border-color: var(--border-dark);
      }
    }
    @media (prefers-color-scheme: light) {
      body {
        background: var(--bg-light);
        color: var(--text-light);
      }
      .card {
        background: var(--card-bg-light);
        border-color: var(--border-light);
      }
      table {
        border-color: var(--border-light);
      }
    }
    body {
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,
        Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
      margin: 0;
      padding: 1rem;
      line-height: 1.4;
      user-select: none;
    }
    h1, h2 {
      margin-top: 0;
    }
    .dashboard {
      max-width: 720px;
      margin: auto;
    }
    .card {
      border: 1px solid;
      border-radius: 8px;
      padding: 1rem 1.5rem;
      margin-bottom: 1rem;
      box-shadow: 0 2px 5px rgb(0 0 0 / 0.1);
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 0.5rem;
    }
    th, td {
      padding: 0.25rem 0.5rem;
      border: 1px solid;
      text-align: left;
      font-variant-numeric: tabular-nums;
    }
    th {
      background-color: #007acc33;
    }
    td.numeric {
      text-align: right;
      font-weight: 600;
    }
    footer {
      margin-top: 3rem;
      text-align: center;
      font-size: 0.9rem;
      color: gray;
    }
    /* Chart container */
    #chart-container {
      margin-top: 1rem;
      background: var(--card-bg-light);
      border: 1px solid var(--border-light);
      border-radius: 8px;
      padding: 1rem;
      box-shadow: 0 2px 5px rgb(0 0 0 / 0.1);
    }
    @media (prefers-color-scheme: dark) {
      #chart-container {
        background: var(--card-bg-dark);
        border-color: var(--border-dark);
      }
    }
  </style>
</head>
<body>
  <div class="dashboard">
    <h1>Raspberry Pi 5 Dashboard</h1>
    <div class="card">
      <h2 id="hostname">Loading...</h2>
      <div><strong>CPU Usage:</strong> <span id="cpu">--%</span></div>
      <div><strong>RAM Usage:</strong> <span id="ram">-- GB</span></div>
      <div><strong>Disk Usage:</strong> <span id="disk">-- GB</span></div>
      <div><strong>Temperature:</strong> <span id="temp">--</span></div>
      <div><strong>Uptime:</strong> <span id="uptime">--</span></div>
      <div><strong>Power Usage:</strong> <span id="power">-- W</span></div>
      <div><strong>Estimated Power Consumption:</strong> <span id="kwh">-- kWh</span></div>
    </div>

    <div class="card">
      <h2>Top 5 CPU-Consuming Processes</h2>
      <table>
        <thead>
          <tr><th>PID</th><th>Name</th><th>CPU %</th></tr>
        </thead>
        <tbody id="topProcsBody">
          <tr><td colspan="3">Loading...</td></tr>
        </tbody>
      </table>
    </div>

    <div id="chart-container" class="card">
      <h2>System Usage Over Time</h2>
      <canvas id="usageChart" height="250"></canvas>
    </div>
  </div>

  <footer>
    Raspberry Pi 5 System Monitor — Powered by Flask & psutil
  </footer>

  <!-- Chart.js CDN -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

  <script>
    const ctx = document.getElementById('usageChart').getContext('2d');

    // We'll keep max 30 points (3 sec * 30 = 90 seconds history)
    const maxDataPoints = 30;

    // Initialize data arrays
    let labels = [];
    let cpuData = [];
    let ramData = [];
    let diskData = [];
    let tempData = [];

    // Chart.js line chart config
    const usageChart = new Chart(ctx, {
      type: 'line',
      data: {
        labels: labels,
        datasets: [
          {
            label: 'CPU %',
            data: cpuData,
            borderColor: 'rgba(54, 162, 235, 1)',
            backgroundColor: 'rgba(54, 162, 235, 0.2)',
            fill: true,
            tension: 0.3,
            yAxisID: 'y',
          },
          {
            label: 'RAM %',
            data: ramData,
            borderColor: 'rgba(255, 99, 132, 1)',
            backgroundColor: 'rgba(255, 99, 132, 0.2)',
            fill: true,
            tension: 0.3,
            yAxisID: 'y',
          },
          {
            label: 'Disk %',
            data: diskData,
            borderColor: 'rgba(255, 206, 86, 1)',
            backgroundColor: 'rgba(255, 206, 86, 0.2)',
            fill: true,
            tension: 0.3,
            yAxisID: 'y',
          },
          {
            label: 'Temperature (°C)',
            data: tempData,
            borderColor: 'rgba(75, 192, 192, 1)',
            backgroundColor: 'rgba(75, 192, 192, 0.2)',
            fill: true,
            tension: 0.3,
            yAxisID: 'yTemp',
          }
        ]
      },
      options: {
        responsive: true,
        interaction: {
          mode: 'index',
          intersect: false,
        },
        stacked: false,
        scales: {
          y: {
            type: 'linear',
            position: 'left',
            min: 0,
            max: 100,
            ticks: {
              callback: val => val + '%'
            },
            title: {
              display: true,
              text: 'Usage %'
            }
          },
          yTemp: {
            type: 'linear',
            position: 'right',
            min: 0,
            max: 100,
            grid: {
              drawOnChartArea: false
            },
            title: {
              display: true,
              text: 'Temperature (°C)'
            }
          },
          x: {
            ticks: {
              maxTicksLimit: 10
            }
          }
        },
        plugins: {
          legend: {
            position: 'bottom'
          },
          tooltip: {
            enabled: true,
            mode: 'nearest',
            intersect: false,
          }
        }
      }
    });

    async function fetchStats() {
      try {
        const res = await fetch('/api/stats');
        if (!res.ok) throw new Error("Failed to fetch stats");
        return await res.json();
      } catch (e) {
        console.error(e);
        return null;
      }
    }

    async function fetchTopProcs() {
      try {
        const res = await fetch('/api/topprocs');
        if (!res.ok) throw new Error("Failed to fetch top processes");
        return await res.json();
      } catch (e) {
        console.error(e);
        return [];
      }
    }

    function updateStatsUI(data) {
      if (!data) {
        document.getElementById('hostname').textContent = "Error loading data";
        return;
      }
      document.getElementById('hostname').textContent = "Hostname: " + data.hostname;
      document.getElementById('cpu').textContent = data.cpu_percent.toFixed(1) + "%";
      document.getElementById('ram').textContent = `${data.ram_used_gb} GB / ${data.ram_total_gb} GB (${data.ram_percent}%)`;
      document.getElementById('disk').textContent = `${data.disk_used_gb} GB / ${data.disk_total_gb} GB (${data.disk_percent}%)`;
      document.getElementById('temp').textContent = data.temperature;
      document.getElementById('uptime').textContent = data.uptime_str;
      document.getElementById('power').textContent = data.power_watts.toFixed(1) + " W";
      document.getElementById('kwh').textContent = data.kwh_used.toFixed(3) + " kWh";

      // Add to chart data
      const now = new Date().toLocaleTimeString();

      if (labels.length >= maxDataPoints) {
        labels.shift();
        cpuData.shift();
        ramData.shift();
        diskData.shift();
        tempData.shift();
      }
      labels.push(now);
      cpuData.push(data.cpu_percent);
      ramData.push(data.ram_percent);
      diskData.push(data.disk_percent);

      // Parse temperature number from string like "48.2'C" or "N/A"
      let tempNum = 0;
      if (data.temperature && data.temperature !== "N/A") {
        const match = data.temperature.match(/([\d\.]+)/);
        tempNum = match ? parseFloat(match[1]) : 0;
      }
      tempData.push(tempNum);

      usageChart.update();
    }

    function updateTopProcsUI(procs) {
      const tbody = document.getElementById('topProcsBody');
      tbody.innerHTML = '';
      if (procs.length === 0) {
        tbody.innerHTML = '<tr><td colspan="3">No data</td></tr>';
        return;
      }
      procs.forEach(p => {
        const tr = document.createElement('tr');
        tr.innerHTML = `<td>${p.pid}</td><td>${p.name}</td><td class="numeric">${p.cpu_percent.toFixed(1)}</td>`;
        tbody.appendChild(tr);
      });
    }

    async function updateDashboard() {
      const stats = await fetchStats();
      updateStatsUI(stats);
      const procs = await fetchTopProcs();
      updateTopProcsUI(procs);
    }

    updateDashboard();
    setInterval(updateDashboard, 3000);
  </script>
</body>
</html>
